In system design, an API (Application Programming Interface) plays a crucial role in enabling communication
between different components, systems, and services. APIs define how different software systems interact 
with each other, whether they are external services, internal microservices, or third-party integrations. 
When designing scalable and maintainable systems, APIs are key in ensuring modularity, flexibility, and 
extensibility.

Types of APIs in System Design
1) RESTful API (Representational State Transfer):
REST is the most commonly used architecture for building web APIs. It leverages standard HTTP methods
like GET, POST, PUT, and DELETE.

It follows a stateless, client-server model, where each request from a client contains all the information needed for processing.
Key principles: Use of URLs (resources), standard HTTP methods, stateless interactions, and JSON/XML for communication.
Example: A REST API for an e-commerce website might look like:

2) GraphQL: A query language for APIs that allows clients to request exactly the data they need (and nothing more).
GraphQL enables a more flexible and efficient approach to data fetching compared to REST, 
especially in scenarios with complex data structures or many relationships between entities.
Example: A GraphQL query to fetch user details might look like:

graphql
Copy
Edit
query {
  user(id: 1) {
    name
    email
    posts {
      title
      content
    }
  }
}

3) SOAP (Simple Object Access Protocol):
SOAP is an older protocol for exchanging structured information between systems using XML messages over HTTP or other protocols like SMTP.
While SOAP is still used in legacy systems (especially in enterprise environments), REST and GraphQL have largely overtaken it due to their simplicity and flexibility.

4) gRPC (Google Remote Procedure Call):
gRPC is a modern, high-performance framework for building APIs, designed for connecting services in a
microservices architecture.
It uses Protocol Buffers (a binary format) for fast communication and supports features like streaming, multiplexing, and bidirectional communication.
gRPC is ideal for use cases where low latency and high throughput are critical.

5) WebSocket APIs:
WebSockets allow for full-duplex communication between client and server, making them ideal for real-time applications (e.g., chat apps, live notifications, financial apps).
Once a WebSocket connection is established, data can flow in both directions without repeatedly opening and closing HTTP connections.
