What is distributed systems:
A distributed system is a collection of independent computers that collaborate to achieve a common goal, 
functioning as a single unit to the end-user.

R: Requirement
A: Architecture
C: Communication protocol
D: Data management
S: Storage(type of DB)
F: Fault tolerance
S: Scalability
S: Security
M: Monitoring
D: Deployment

Designing a distributed system involves a series of strategic decisions to ensure scalability, fault tolerance, consistency, and maintainability. Here's a step-by-step approach to designing one:

1. Define Requirements
   Functional: What does the system need to do?
   Non-functional: Consider latency, availability, scalability, durability, and consistency.

2. Choose an Architecture
   Client-Server: Common, simple.
   Microservices: Small, independently     deployable services.
   Peer-to-Peer: All nodes are equal.
   Event-driven: Services communicate via   events.

3. Decide on Communication Protocol
   Synchronous: REST, gRPC.
    Asynchronous: Message queues (Kafka, RabbitMQ).

4. Data Management
   Data partitioning (sharding): Split data across nodes.
   Replication: Increase availability and durability.

   Consistency model:
      Strong consistency (CP in CAP)
      Eventual consistency (AP in CAP)

5. Choose Storage
   Relational: PostgreSQL, MySQL.
   NoSQL: MongoDB, Cassandra, DynamoDB.

6. Fault Tolerance and Reliability
   Redundancy (multiple nodes/services)
   Health checks and failover
   Retry logic and circuit breakers

7. Scalability
   Horizontal vs. vertical scaling
   Load balancing (e.g., NGINX, HAProxy)
   Auto-scaling strategies

8. Security
   Authentication and authorization (e.g., OAuth2)
   Encryption in transit and at rest
   Secure APIs and rate limiting

9. Monitoring and Observability
   Logging (e.g., ELK stack)
   Metrics (e.g., Prometheus, Grafana)
   Tracing (e.g., OpenTelemetry, Jaeger)

10. Deployment and Management
    Use containers (e.g., Docker)
    Orchestrate with Kubernetes
    CI/CD
